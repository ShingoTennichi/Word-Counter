import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useState, useId} from 'react';
import { ChangeEvent } from 'react';
import resizeTextArea from './components/resizeTextArea';
import data from '../JSON/bannedWords.json';
import frequentlyUsed from './components/frequentryUsedWords';
import fetchMeaning from './components/fetchMeaning';

type userInput = {
    characters: string,
    frequency: [string, number][],
    input: string,
    wordBank: string[]
};

type selectedArea = {
    characters: string,
    frequency: [string, number][],
    selected: string[],
    wordBank: string[]

};
type Meaning = [{
    [key: string]:[{
        [key: string]:[{
            [key: string]:Object
        }]
    }]
}];
type Synonyms = string[]

const Home: NextPage = () => {
    const id = useId();
    const [meaning, setMeaning] = useState<Meaning>([]);
    const [synonyms, setSynonyms] = useState<Synonyms>([]);
    const [selectedArea, setSelectedArea] = useState<selectedArea>({
        characters: "",
        selected: [],
        frequency: [],
        wordBank: []
    });
    const [userInput, setUserInput] = useState<userInput>({
        characters: "",
        frequency: [],
        input: "",
        wordBank: []
    });
    const bannedWords: {[key: string]: boolean} = data;

    function handleInput(input: ChangeEvent<HTMLTextAreaElement>) {
        const inputString: string = input.target.value;
        getUserInput(inputString);
        resizeTextArea();
    }

    function getUserInput(input: string) {
        const formatString: string = input.trim().replace(/[\n.,"'’-]/g, " ");
        const words: string[] = formatString.split(' ').filter(s => {return s !== ''});
        const mostFrequency: [string, number][] = frequentlyUsed(words, bannedWords)
        setUserInput({
            ...userInput,
            characters: formatString,
            frequency: mostFrequency,
            input: input,
            wordBank: words
        });
    }

    function getSelectedWord(): void {
        const selected: string[] = window.getSelection()?.toString().trim().split(' ')?? [];
        // console.log(input.target.value);
        console.log(selected);
        if(selected.length === 1) {
            if(selected[0] !== ''){
                setSelectedArea({
                    characters: selected[0],
                    selected: [],
                    frequency: [],
                    wordBank: []
                })
            } else {
                // reset
                setSelectedArea({
                    characters: "",
                    selected: [],
                    frequency: [],
                    wordBank: []
                })
            }
        } else {
            const formatString: string = window.getSelection()?.toString().trim().replace(/[\n.,"'’-]/g, " ") ?? "";
            const words: string[] = formatString.split(' ').filter(s => {return s !== ''});
            const mostFrequency: [string, number][] = frequentlyUsed(words, bannedWords)
            setSelectedArea({
                ...userInput,
                characters: formatString,
                frequency: mostFrequency,
                selected:selected,
                wordBank: words
            })
        }
    }

    async function getMeaning(word: string) {
        fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)
        .then((res) => {
            return res.json()
        }).then((data) => {
            setMeaning(data);
            console.log(data);
        })
        console.log(meaning);
    }
    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div className={styles.gridContainer}>
                    <div className={styles.title}>
                        <h1>Word Counter</h1>
                    </div>
                    <div>
                        <div className={styles.inputArea}>
                            <button className={ selectedArea.characters  === "" ? styles.btnEmp : styles.btn} onClick={() => getMeaning(selectedArea.characters)}>Meaning & Synonyms</button>
                            <textarea id="wordHolder" name="wordHolder" onChange={(input) => handleInput(input)} onMouseUp={() => getSelectedWord()} onKeyUp={() => getSelectedWord()} value={userInput.input}></textarea>
                            {
                                meaning.length ?
                                <>
                                <p>{"Meaning of " + meaning[0].word}</p>
                                <ul className={styles.listContainer}>
                                {
                                meaning.map((el) => {
                                let keyNum = 1000;
                                return(el.meanings.map((w) => {
                                    return(w.definitions.map((a) => {
                                        ++keyNum;
                                        return(
                                        <li key={id + keyNum} className={styles.listItem}>- {"[" + w.partOfSpeech + "]: " + a.definition}</li>
                                        )})
                                    )})
                                )})
                                }
                                </ul>
                                </>
                                : <></>
                            }
                            {
                                meaning.length ?
                                <>
                                <p>{"Synonyms of " + meaning[0].word}</p>
                                <ul className={styles.listContainer}>
                                {meaning.map((el) => {
                                let keyNum = 2000;
                                return(el.meanings.map((w) => {
                                    return(w.synonyms.map((a) => {
                                        ++keyNum;
                                        return(
                                        <li key={id+keyNum} className={styles.listItem}>- {"[" + w.partOfSpeech + "]: " + a}</li>
                                        )})
                                    )})
                                )})
                                }
                                </ul>
                                </>
                                : <></>
                            }
                        </div>
                    </div>
                    <div className={styles.total}>
                        <div className={styles.details}>
                            <h2>Details</h2>
                            <p>Words: {selectedArea.wordBank.length ? selectedArea.wordBank.length : userInput.wordBank.length}</p>
                            <p>Characters: {selectedArea.characters ? selectedArea.characters.length : userInput.characters.length}</p>
                        </div>
                        <div className={styles.wordCollections}>
                            <h2>words</h2>
                            <ul>
                            {
                                selectedArea.wordBank.length ?
                                selectedArea.frequency.map((word) => {
                                    return(
                                        <li key={id + word[0]}>{word[0]} : {word[1]}</li>
                                    )
                                }) :
                                userInput.frequency.map((word) => {
                                    return(
                                        <li key={id + word[0]}>{word[0]} : {word[1]}</li>
                                    )
                                })
                            }
                            </ul>
                        </div>
                    </div>
                </div>
            </main>
            <footer className={styles.footer}>
            </footer>
        </div>
    )
}

export default Home